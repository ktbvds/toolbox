#!/bin/bash
######################################################
## Compatible with RedHat/CentOS Debian/Ubuntu SUSE ##
######################################################

# Support chkconfig on RedHat/CentOS
# chkconfig:   2345 90 60
# description: httpd
# processname: httpd
# config:      /usr/local/httpd/conf/httpd.conf
# pidfile:     /var/run/httpd.pid

# Support Linux Standard Base Core Specification 3.2
### BEGIN INIT INFO
# Provides:          httpd
# Required-Start:    $local_fs $syslog $network
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 S 1 6
# Short-Description: Start/stop httpd daemon
# Description:       httpd is a classical web server
### END INIT INFO

#debug
#set -x
#check unbound variables
#set -u
# Scripts PATH enviroment
export PATH='/usr/bin:/bin:/usr/sbin:/sbin'
# disable core dump
ulimit -c 0
ulimit -n 100001
# return value
RETVAL=0
# nginx general config
PROG='httpd'
SYMLINK=$(readlink -f /usr/local/httpd)
BASEDIR=${SYMLINK:-/usr/local/httpd}
DAEMON="${BASEDIR}/bin/httpd"
CONF="${BASEDIR}/conf/httpd.conf"
PIDFILE="/var/run/$PROG.pid"
LOCKFILE="/var/lock/$PROG"
# httpd start timeout milliscond
STARTTIME=10000
# httpd stop timeout milliscond
STOPTIME=10000

[ -f "${BASEDIR}/bin/envvars" ] && source "${BASEDIR}/bin/envvars"

#Common Function
color_msg(){
    local COLOR=$1
    local MSG=$2
    OFFSET="\033[60G"
    NORMAL="\033[0m"
    case $COLOR in
        red)
            COLOR="\033[1;40;31m"
            ;;
        green)
            COLOR="\033[1;40;32m"
            ;;
        yellow)
            COLOR="\033[1;40;33m"
            ;;
        *)
            COLOR="\033[0m"
            ;;
    esac
    echo -en "$OFFSET [$COLOR $MSG $NORMAL"
    echo     "]"
}

configtest() {
    echo -n "Configtest $PROG : "
    $DAEMON -f $CONF -t >/dev/null 2>&1
    if [ $? -eq 0 ] ;then
        color_msg green SUCCESS
    else
        color_msg red FAILED && exit 1
    fi
}

start() {
    echo -n "Starting $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -n "$PROC_PID" ]; then
        echo -n "is already running."
        color_msg yellow WARNING
    else
        $DAEMON -f $CONF -k start >/dev/null 2>&1
        if [  $? -eq 0 ]; then
            color_msg green SUCCESS && touch $LOCKFILE
        else
            color_msg red FAILED && exit 1
        fi
    fi
}

stop() {
    echo -n "Stopping $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ]; then
        echo -n "is not running."
        color_msg yellow WARNING
    else
        kill -TERM ${PROC_PID} >/dev/null 2>&1
        #$DAEMON -f $CONF -k stop >/dev/null 2>&1
        while [ "$STOPTIME" -gt 0 ]; do
            kill -0 ${PROC_PID} >/dev/null 2>&1 || break
            STOPTIME=$(($STOPTIME-1))
            echo -n "." && sleep 0.001s
        done
        if [ "$STOPTIME" -le 0 ]; then
            color_msg red TIMEOUT && exit 1
        else
            color_msg green SUCCESS
            rm -f $PIDFILE $LOCKFILE
        fi
    fi
}

graceful-stop() {
    echo -n "Stopping $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ]; then
        echo -n "is not running."
        color_msg yellow WARNING
    else
        kill -WINCH ${PROC_PID} >/dev/null 2>&1
        #$DAEMON -f $CONF -k graceful-stop >/dev/null 2>&1
        while [ "$STOPTIME" -gt 0 ]; do
            kill -0 ${PROC_PID} >/dev/null 2>&1 || break
            STOPTIME=$(($STOPTIME-1))
            echo -n "." && sleep 0.001s
        done
        if [ "$STOPTIME" -le 0 ]; then
            color_msg red TIMEOUT && exit 1
        else
            color_msg green SUCCESS
            rm -f $PIDFILE $LOCKFILE
        fi
    fi
}

restart() {
        echo -n "Restarting $PROG : "
        PROC_PID=$(pgrep -P 1 -u root ^$PROG)
        if [ -z "$PROC_PID" ]; then
            echo -n "is not running,    Starting"
            color_msg yellow WARNING
            $DAEMON -f $CONF -k start >/dev/null 2>&1
            if [  $? -eq 0 ]; then
                color_msg green SUCCESS && touch $LOCKFILE
            else
                color_msg red FAILED && exit 1
            fi
        else
            kill -HUP ${PROC_PID} >/dev/null 2>&1
            #$DAEMON -f $CONF -k restart >/dev/null 2>&1
            if [  $? -eq 0 ]; then
                color_msg green SUCCESS && touch $LOCKFILE
            else
                color_msg red FAILED && exit 1
            fi
        fi
}

reload() {
    echo -n "Reloading $PROG : "
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -n "$PROC_PID" ]; then
        kill -USR1 ${PROC_PID} >/dev/null 2>&1
        #$DAEMON -f $CONF -k graceful >/dev/null 2>&1
        if [  $? -eq 0 ]; then
            color_msg green SUCCESS
        else
            color_msg red FAILED && exit 1
        fi
    else
        echo -n "is not running."
        color_msg yellow WARNING
    fi
}

status() {
    PROC_PID=$(pgrep -P 1 -u root ^$PROG)
    if [ -z "$PROC_PID" ];then
        echo "$PROG is stopped"
        exit 3
    else
        echo "$PROG (pid $PROC_PID) is running..."
        exit 0
    fi
}

case "$1" in
    configtest)
        configtest
        ;;
    start)
        configtest
        start
        ;;
    stop)
        stop
        ;;
    restart|try-restart)
        configtest
        restart
        ;;
    reload|force-reload|logrotate)
        configtest
        reload
        ;;
    status)
        status
        ;;
    *)
       echo $"Usage: $0 {configtest|start|stop|restart|reload|status|logrotate}"
       exit 1
    ;;
esac
